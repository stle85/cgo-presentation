package profiler

// The default memory profiling rate.
const DefaultMemProfileRate = 4 * 1024

// ProfilePath controls the base path where various profiling
// files are written. If blank, the base path will be generated by ioutil.TempDir.
func ProfilePath(path string) func(*profile) {
	return func(p *profile) {
		p.path = path
	}
}

// GenerateSvg enables SVG image profile generation.
func GenerateSvg() func(*profile) {
	return func(p *profile) {
		p.genSvg = true
	}
}

// Enables cpu profiling.
func CPUProfile() func(*profile) {
	return func(p *profile) {
		p.mode = cpuMode
	}
}

// Enables memory profiling at the preferred rate.
func MemProfileRate(rate int) func(*profile) {
	return func(p *profile) {
		p.memProfileRate = rate
		p.mode = memMode
	}
}

// Enables memory profiling to profile the heap.
func MemProfileHeap() func(*profile) {
	return func(p *profile) {
		p.memProfileRate = DefaultMemProfileRate
		p.memProfileType = "heap"
		p.mode = memMode
	}
}

// Enables memory to profile allocations.
func MemProfileAllocs() func(*profile) {
	return func(p *profile) {
		p.memProfileRate = DefaultMemProfileRate
		p.memProfileType = "allocs"
		p.mode = memMode
	}
}

// Enables mutex profiling.
func MutexProfile() func(*profile) {
	return func(p *profile) {
		p.mode = mutexMode
	}
}

// Enables block (contention) profiling.
func BlockProfile() func(*profile) {
	return func(p *profile) {
		p.mode = blockMode
	}
}

// Enables execution tracing.
func TraceProfile() func(*profile) {
	return func(p *profile) {
		p.mode = traceMode
	}
}

// Enables thread creation profiling..
func ThreadCreationProfile() func(*profile) {
	return func(p *profile) {
		p.mode = threadCreateMode
	}
}

// Enables goroutine profiling.
func GoroutineProfile() func(*profile) {
	return func(p *profile) {
		p.mode = goroutineMode
	}
}
